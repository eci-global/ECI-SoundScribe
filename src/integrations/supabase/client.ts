// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Prefer environment-provided values (e.g., Vite: VITE_SUPABASE_URL/ANON_KEY),
// fall back to production defaults to avoid breaking prod.
const ENV_URL = (import.meta as any)?.env?.VITE_SUPABASE_URL;
const ENV_KEY = (import.meta as any)?.env?.VITE_SUPABASE_ANON_KEY;

const SUPABASE_URL = ENV_URL || "https://qinkldgvejheppheykfl.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = ENV_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFpbmtsZGd2ZWpoZXBwaGV5a2ZsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk1OTA0NDcsImV4cCI6MjA2NTE2NjQ0N30.xn9c-6Sr_kEbETzafRrlaWMHgbUIoqifsCQBrqYT7u4";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  },
  realtime: {
    params: {
      eventsPerSecond: 10,
    },
  },
  global: {
    headers: {
      'X-Client-Info': 'soundscribe-web',
    },
  },
});

// Realtime Manager for handling connections
class RealtimeManager {
  private channels: Map<string, any> = new Map();

  createChannel(channelName: string, config?: any) {
    try {
      const channel = supabase.channel(channelName, config);
      this.channels.set(channelName, channel);
      return channel;
    } catch (error) {
      console.error(`Failed to create channel ${channelName}:`, error);
      return null;
    }
  }

  removeChannel(channelName: string) {
    const channel = this.channels.get(channelName);
    if (channel) {
      channel.unsubscribe();
      this.channels.delete(channelName);
    }
  }

  cleanup() {
    for (const [name, channel] of this.channels) {
      channel.unsubscribe();
    }
    this.channels.clear();
  }

  getConnectionStatus() {
    return {
      channelCount: this.channels.size,
      channels: Array.from(this.channels.keys())
    };
  }
}

export const realtimeManager = new RealtimeManager();

// Development debugging utilities - enabled for troubleshooting
if (typeof window !== 'undefined' && import.meta.env.DEV) {
  (window as any).supabase = supabase;
  console.log('Supabase client initialized:', SUPABASE_URL);
  if (!ENV_URL || !ENV_KEY) {
    console.warn('Using default Supabase URL/key. Set VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY for local dev.');
  }
  
  // Test Supabase connection
  supabase.auth.getSession().then(({ data, error }) => {
    console.log('Supabase connection test - Session data:', data);
    if (error) {
      console.error('Supabase connection test - Error:', error);
    } else {
      console.log('Supabase connection test - Success!');
    }
  }).catch((err) => {
    console.error('Supabase connection test - Failed:', err);
  });
}
