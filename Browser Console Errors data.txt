Managing SAML 2.0 connections#
Once you've enabled SAML 2.0 support on your project via the Auth Providers page in the dashboard, you can use the Supabase CLI to add, update, remove and view information about identity providers.

Add a connection#
To establish a connection to a SAML 2.0 Identity Provider (IdP) you will need:

A SAML 2.0 Metadata XML file, or a SAML 2.0 Metadata URL pointing to an XML file
(Optional) Email domains that the organization's IdP uses
(Optional) Attribute mappings between the user properties of the IdP and the claims stored by Supabase Auth
You should obtain the SAML 2.0 Metadata XML file or URL from the organization whose IdP you wish to connect. Most SAML 2.0 Identity Providers support the Metadata URL standard, and we recommend using a URL if this is available.

Commonly used SAML 2.0 Identity Providers that support Metadata URLs:

Okta
Azure AD (Microsoft Entra)
PingIdentity
Commonly used SAML 2.0 Identity Providers that only support Metadata XML files:

Google Workspaces (G Suite)
Any self-hosted or on-prem identity provider behind a VPN
Once you've obtained the SAML 2.0 Metadata XML file or URL you can establish a connection with your project's Supabase Auth server by running:

supabase sso add --type saml --project-ref <your-project> \
  --metadata-url 'https://company.com/idp/saml/metadata' \
  --domains company.com
If you wish to use a Metadata XML file instead, you can use:

supabase sso add --type saml --project-ref <your-project> \
  --metadata-file /path/to/saml/metadata.xml \
  --domains company.com
This command will register a new identity provider with your project's Auth server. When successful, you will see the details of the provider such as it's SAML information and registered domains.

Note that only persons with write access to the project can register, update or remove identity providers.

Once you've added an identity provider, users who have access to it can sign in to your application. With SAML 2.0 there are two ways that users can sign in to your project:

By signing-in from your application's user interface, commonly known as SP (Service Provider) Initiated Flow
By clicking on an icon in the application menu on the company intranet or identity provider page, commonly known as Identity Provider Initiated (IdP) Flow
To initiate a sign-in request from your application's user interface (i.e. the SP Initiated Flow), you can use:


JavaScript

Dart

Swift

Kotlin
supabase.auth.signInWithSSO({
  domain: 'company.com',
})
Calling signInWithSSO starts the sign-in process using the identity provider registered for the company.com domain name. It is not required that identity providers be assigned one or multiple domain names, in which case you can use the provider's unique ID instead.

Understanding attribute mappings#
When a user signs in using the SAML 2.0 Single Sign-On protocol, an XML document called the SAML Assertion is exchanged between the identity provider and Supabase Auth.

This assertion contains information about the user's identity and other authentication information, such as:

Unique ID of the user (called NameID in SAML)
Email address
Name of the user
Department or organization
Other attributes present in the users directory managed by the identity provider
With exception of the unique user ID, SAML does not require any other attributes in the assertion. Identity providers can be configured so that only select user information is shared with your project.

Your project can be configured to recognize these attributes and map them into your project's database using a JSON structure. This process is called attribute mapping, and varies according to the configuration of the identity provider.

For example, the following JSON structure configures attribute mapping for the email and first_name user identity properties.

{
  "keys": {
    "email": {
      "name": "mail"
    },
    "first_name": {
      "name": "givenName"
    }
  }
}
When creating or updating an identity provider with the Supabase CLI you can include this JSON as a file with the --attribute-mapping-file /path/to/attribute/mapping.json flag.

For example, to change the attribute mappings to an existing provider you can use:

supabase sso update <provider-uuid> --project-ref <your-project> \
  --attribute-mapping-file /path/to/attribute/mapping.json
Given a SAML 2.0 assertion that includes these attributes:

<saml:AttributeStatement>
  <!-- will be mapped to the email key -->
  <saml:Attribute
    Name="mail"
    NameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:basic"
    >
    <saml:AttributeValue xsi:type="xs:string">
      valid.email@supabase.io
    </saml:AttributeValue>
  </saml:Attribute>
  <!-- will be mapped to the first_name key -->
  <saml:Attribute
    Name="givenName"
    NameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:basic"
    >
    <saml:AttributeValue xsi:type="xs:string">
      Jane Doe
    </saml:AttributeValue>
  </saml:Attribute>
</saml:AttributeStatement>
Will result in the following claims in the user's identity in the database and JWT:

{
  "email": "valid.email@supabase.io",
  "custom_claims": {
    "first_name": "Jane Doe"
  }
}
Supabase Auth does not require specifying attribute mappings if you only need access to the user's email. It will attempt to find an email attribute specified in the assertion. All other properties will not be automatically included, and it is those you need to map.

At this time it is not possible to have users without an email address, so SAML assertions without one will be rejected.

Most SAML 2.0 identity providers use Lightweight Directory Access Protocol (LDAP) attribute names. However, due to their variability and complexity operators of identity providers are able to customize both the Name and attribute value that is sent to Supabase Auth in an assertion. Refer to the identity provider's documentation and contact the operator for details on what attributes are mapped for your project.

Accessing the stored attributes

The stored attributes, once mapped, show up in the access token (a JWT) of the user. If you need to look these values up in the database, you can find them in the auth.identities table under the identity_data JSON column. Identities created for SSO providers have sso:<uuid-of-provider> in the provider column, while id contains the unique NameID of the user account.

Furthermore, you can find the same identity data under raw_app_meta_data inside auth.users.

Remove a connection#
Once a connection to an identity provider is established, you can remove it by running:

supabase sso remove <provider-id> --project-ref <your-project>
If successful, the details of the removed identity provider will be shown. All user accounts from that identity provider will be immediately logged out. User information will remain in the system, but it will no longer be possible for any of those accounts to be accessed in the future, even if you add the connection again.

If you need to reassign those user accounts to another identity provider, open a support ticket.
A list of all registered identity providers can be displayed by running:

supabase sso list --project-ref <your-project>
Update a connection#
You may wish to update settings about a connection to a SAML 2.0 identity provider.

Commonly this is necessary when:

Cryptographic keys are rotated or have expired
Metadata URL has changed, but is the same identity provider
Other SAML 2.0 Metadata attributes have changed, but it is still the same identity provider
You are updating the domains or attribute mapping
You can use this command to update the configuration of an identity provider:

supabase sso update <provider-id> --project-ref <your-project>
Use --help to see all available flags.

It is not possible to change the unique SAML identifier of the identity provider, known as EntityID. Everything else can be updated. If the SAML EntityID of your identity provider has changed, it is regarded as a new identity provider and you will have to register it like a new connection.

Retrieving information about a connection#
You can always obtain a list of all registered providers using:

supabase sso list --project-ref <your-project>
This list will only include basic information about each provider. To see all of the information about a provider you can use:

supabase sso show <provider-id> --project-ref <your-project>
You can use the -o json flag to output the information as JSON, should you need to. Other formats may be supported, use --help to see all available options.